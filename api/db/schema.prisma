// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                  String       @id @default(uuid()) @db.VarChar()
  email               String       @unique @db.VarChar()
  name                String       @db.VarChar()
  hashedPassword      String       @db.VarChar()
  salt                String       @db.VarChar()
  roles               UserType
  resetToken          String?      @db.VarChar()
  resetTokenExpiredAt DateTime?
  classesAsProfessor  Classroom[]  @relation("professor")
  classesAsStudent    Classroom[]  @relation("classStudents")
  Document            Document[]
  Correction          Correction[]
  Comment             Comment[]
}

model Classroom {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar()
  code        String?    @unique @db.VarChar(5)
  professor   User       @relation("professor", fields: [professorId], references: [id])
  professorId String     @db.VarChar()
  students    User[]     @relation("classStudents")
  Activity    Activity[]
}

model Activity {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar()
  description String     @db.VarChar()
  createdAt   DateTime   @default(now())
  dueDate     DateTime
  maxSize     Int
  Classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId Int
  promptId    Int
  Document    Document[]
  Prompt      Prompt?    @relation(fields: [promptId], references: [id])
}

model Prompt {
  id          Int         @id @default(autoincrement())
  description String      @db.VarChar()
  Criterion   Criterion[]
  Activity    Activity[]
}

model Document {
  id             Int          @id @default(autoincrement())
  content        String       @db.VarChar()
  handed         DateTime     @default(now())
  mark           Int?
  activity       Activity?    @relation(fields: [activityId], references: [id])
  activityId     Int?
  student        User?        @relation(fields: [studentId], references: [id])
  studentId      String?      @db.VarChar()
  subFactorsMark String?      @db.VarChar()
  Correction     Correction[]
  Comment        Comment[]
}

model Correction {
  id          Int        @id @default(autoincrement())
  text        String     @db.VarChar()
  description String     @db.VarChar()
  correct     String?    @db.VarChar()
  severity    Severity
  professor   User?      @relation(fields: [professorId], references: [id])
  professorId String?    @db.VarChar()
  subfactor   Subfactor? @relation(fields: [subfactorId], references: [id])
  subfactorId Int
  document    Document?  @relation(fields: [documentId], references: [id])
  documentId  Int
}

model Subfactor {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar()
  description String       @db.VarChar()
  criterion   Criterion?   @relation(fields: [criterionId], references: [id])
  criterionId Int
  Correction  Correction[]
}

model Criterion {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar()
  prompt    Prompt?     @relation(fields: [promptId], references: [id])
  promptId  Int
  Subfactor Subfactor[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String   @db.VarChar()
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.VarChar()
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int
}

enum UserType {
  P //professor
  S //student
}

enum Severity {
  N //neutral
  B //bad
  G //good
}
